---
interface Props {
  nombre: string;
  icono: any; // Componente o contenido dinámico
  imagen: string;
  texto: string;
  esPar?: boolean; // Para determinar si el diseño alterna
}

const { nombre, imagen, texto, icono: Icono, esPar } = Astro.props;
---
<body class="bg-[#ff6a3e]">
  <div class="bg-[#ff6a3e] py-12 fade-in">
    <div class="container mx-auto px-6 py-12 bg-white rounded-lg shadow-md">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-8 items-center">
        {esPar && (
          <div class="relative group">
            <img 
              src={imagen}
              alt={nombre} 
              class="w-full rounded-lg object-cover"
            />
          </div>
        )}
  
        <div class="text-left relative">
          <div class="text-gray-100 text-[96px] font-bold -z-10 absolute -left-8 md:-left-12 top-0 md:top-6 opacity-20 h1-title">
            {esPar ? "1" : "2"}
          </div>
          <h2 class="text-[#ff6a3e] font-bold text-[45px] flex items-center gap-2">
            <span class="inline-flex">
              <Icono />
            </span>
            {nombre}
          </h2>
          <p class="text-gray-600 text-[30px] text-justify">
            {texto}
          </p>
          <div class="flex gap-8 mt-6">
            <img src="/img/arbol.png" alt="Árbol 1" class="w-12 h-12" />
            <img src="/img/arbol.png" alt="Árbol 2" class="w-12 h-12" />
            <img src="/img/arbol.png" alt="Árbol 3" class="w-12 h-12" />
          </div>
        </div>
  
        {!esPar && (
          <div class="relative group">
            <img 
              src={imagen}
              alt={nombre} 
              class="w-full rounded-lg object-cover"
            />
          </div>
        )}
      </div>
    </div>
  </div> 
</body>

<style>
  /* Estado inicial de la animación */
  .fade-in {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.8s ease-out, transform 0.8s ease-out;
  }

  /* Estado final de la animación */
  .fade-in.visible {
    opacity: 1;
    transform: translateY(0);
  }
</style>

<script>
  function initAnimations() {
    const fadeElements = document.querySelectorAll(".fade-in");

    // Configurar el IntersectionObserver
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("visible");
          observer.unobserve(entry.target); // Dejar de observar después de animar
        }
      });
    });

    // Reiniciar el estado inicial y observar
    fadeElements.forEach((el) => {
      el.classList.remove("visible"); // Restablecer el estado inicial
      observer.observe(el); // Observar cada elemento
    });
  }

  // Inicializar las animaciones en el DOM
  document.addEventListener("DOMContentLoaded", initAnimations);

  // Reinicializar animaciones tras navegación interna en Astro (SPA)
  document.addEventListener("astro:after-swap", initAnimations);

  // Solución adicional para navegaciones completas
  window.addEventListener("load", initAnimations);
</script>